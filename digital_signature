
import hashlib
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import serialization

document_text = input("Enter the document text: ")
document_hash = hashlib.sha256(document_text.encode()).hexdigest()
print("Document Hash:", document_hash)

# Generate private key (for demonstration; typically pre-generated and stored securely)
private_key = rsa.generate_private_key(
    public_exponent=65537,
    key_size=2048,
)
# Sign the document hash with the private key
signature = private_key.sign(
    document_text.encode(),
    padding.PSS(
        mgf=padding.MGF1(hashes.SHA256()),
        salt_length=padding.PSS.MAX_LENGTH
    ),
    hashes.SHA256()
)
print("Digital Signature:", signature)
# Load sender's public key (for demonstration, derived from the private key)
public_key = private_key.public_key()
# Verify the signature
try:
    public_key.verify(
        signature,
        document_text.encode(),
        padding.PSS(
            mgf=padding.MGF1(hashes.SHA256()),
            salt_length=padding.PSS.MAX_LENGTH
        ),
        hashes.SHA256()
    )
    print("The signature is valid. The document is authentic.")
except Exception as e:
    print("Signature verification failed:", e)
