def rail_fence_encrypt(plaintext, rails):
    if rails <= 1:
        return plaintext  # No encryption for 1 rail
    fence = [[] for _ in range(rails)]
    direction_down = False
    row = 0
    for char in plaintext:
        fence[row].append(char)
        if row == 0 or row == rails - 1:
            direction_down = not direction_down
        row += 1 if direction_down else -1
    # Flatten the fence to get the ciphertext
    return ''.join([''.join(row) for row in fence])


def rail_fence_decrypt(ciphertext, rails):
    if rails <= 1:
        return ciphertext  # No decryption for 1 rail
    # Prepare an empty matrix to reconstruct the pattern
    fence = [['' for _ in range(len(ciphertext))] for _ in range(rails)]
    direction_down = False
    row, col = 0, 0
    # Mark positions in the fence where characters exist
    for _ in range(len(ciphertext)):
        fence[row][col] = '*'
        if row == 0 or row == rails - 1:
            direction_down = not direction_down
        row += 1 if direction_down else -1
        col += 1
    # Fill the fence with the ciphertext characters
    index = 0
    for r in range(rails):
        for c in range(len(ciphertext)):
            if fence[r][c] == '*' and index < len(ciphertext):
                fence[r][c] = ciphertext[index]
                index += 1
    # Read the plaintext from the fence
    result = []
    row, col = 0, 0
    direction_down = False
    for _ in range(len(ciphertext)):
        result.append(fence[row][col])
        if row == 0 or row == rails - 1:
            direction_down = not direction_down
        row += 1 if direction_down else -1
        col += 1

    return ''.join(result)

plaintext = input("Enter the text you want to Cipher: ")
rails = int(input("Enter the number of rails needed: "))

ciphertext = rail_fence_encrypt(plaintext, rails)
decrypted_text = rail_fence_decrypt(ciphertext, rails)

print(f"Plaintext: {plaintext}")
print(f"Encrypted: {ciphertext}")
print(f"Decrypted: {decrypted_text}")
